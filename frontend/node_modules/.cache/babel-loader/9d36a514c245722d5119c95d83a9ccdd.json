{"ast":null,"code":"var _jsxFileName = \"D:\\\\amass\\\\crawlingweb\\\\frontend\\\\src\\\\Contexts\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ResultContext = /*#__PURE__*/createContext(undefined);\nexport function ResultContextProvider({\n  children\n}) {\n  _s();\n\n  const [selectedOption, selectedModelOption] = useState([]);\n  const value = {\n    selectedOption,\n    selectedModelOption\n  };\n  return /*#__PURE__*/_jsxDEV(ResultContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ResultContextProvider, \"JTAuXOZdL1XDRtpmfKzicc2LhJk=\");\n\n_c = ResultContextProvider;\nexport function useResultContext() {\n  _s2();\n\n  return useContext(ResultContext);\n}\n\n_s2(useResultContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultContextProvider\");","map":{"version":3,"sources":["D:/amass/crawlingweb/frontend/src/Contexts/context.js"],"names":["createContext","useContext","useState","ResultContext","undefined","ResultContextProvider","children","selectedOption","selectedModelOption","value","useResultContext"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAACI,SAAD,CAAnC;AAEP,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA4C;AAAA;;AAC/C,QAAM,CAAEC,cAAF,EAAkBC,mBAAlB,IAA0CN,QAAQ,CAAC,EAAD,CAAxD;AAEA,QAAMO,KAAK,GAAG;AACVF,IAAAA,cADU;AAEVC,IAAAA;AAFU,GAAd;AAKA,sBAAO,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEC,KAA/B;AAAA,cAAuCH;AAAvC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GATeD,qB;;KAAAA,qB;AAWhB,OAAO,SAASK,gBAAT,GAA4B;AAAA;;AAC/B,SAAOT,UAAU,CAACE,aAAD,CAAjB;AACH;;IAFeO,gB","sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\n\r\nexport const ResultContext = createContext(undefined);\r\n\r\nexport function ResultContextProvider({ children }){\r\n    const [ selectedOption, selectedModelOption ] = useState([]);\r\n\r\n    const value = {\r\n        selectedOption,\r\n        selectedModelOption,\r\n    };\r\n\r\n    return <ResultContext.Provider value={value}>{children}</ResultContext.Provider>;\r\n}\r\n\r\nexport function useResultContext() {\r\n    return useContext(ResultContext);\r\n}"]},"metadata":{},"sourceType":"module"}